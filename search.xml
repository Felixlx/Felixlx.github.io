<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>eks启动</title>
      <link href="/2023/06/08/k8s-de-qi-dong/"/>
      <url>/2023/06/08/k8s-de-qi-dong/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#%E5%8E%9F%E7%94%9Fkubernetes-%E9%9B%86%E7%BE%A4%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC">原生kubernetes 集群启动引导</a></li><li><a href="#eks%E9%9B%86%E7%BE%A4%E7%9A%84kubelet%E5%90%AF%E5%8A%A8%E5%BC%95%E5%AF%BC">eks集群的kubelet启动引导</a></li></ul><h2 id="原生kubernetes-集群启动引导"><a href="#原生kubernetes-集群启动引导" class="headerlink" title="原生kubernetes 集群启动引导"></a>原生kubernetes 集群启动引导</h2><blockquote><p>参考来源 <a href="https://github.com/zhojiew/aws-learning-notebook/blob/main/eks/eks%E8%8A%82%E7%82%B9%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%BC%95%E5%AF%BC%E5%92%8C%E9%89%B4%E6%9D%83%E9%80%BB%E8%BE%91.md">https://github.com/zhojiew/aws-learning-notebook/blob/main/eks/eks%E8%8A%82%E7%82%B9%E7%9A%84%E5%88%9D%E5%A7%8B%E5%8C%96%E5%BC%95%E5%AF%BC%E5%92%8C%E9%89%B4%E6%9D%83%E9%80%BB%E8%BE%91.md</a></p></blockquote><img src="https://s2.loli.net/2023/05/20/DwbpckVa9rS37Bg.png" style="zoom:67%;"><p>一切的开始都是kubelet这个服务的启动<br>kubelet会寻找kubeconfig文件，如果没找到则</p><ul><li>寻找bootstrap-kubeconfig文件开始引导过程</li><li>使用bootstrap-kubeconfig文件中的api server url和token（有限权限）进行身份认证</li><li>创建和取回证书签名请求（CSR），此时kube-controller-manager会自动批复该 CSR</li><li>kubelet 取回签发的证书，创建 <code>kubeconfig</code>文件，包含密钥和已签名的证书</li></ul><p>在使用kubeadm初始化control plane时日志中的信息和引导配置一致</p><blockquote><p><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/#bootstrap-initialization">https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/#bootstrap-initialization</a></p></blockquote><pre class="line-numbers language-none"><code class="language-none">[apiclient] All control plane components are healthy after 15.003839 seconds[upload-config] Storing the configuration used in ConfigMap "kubeadm-config" in the "kube-system" Namespace[kubelet] Creating a ConfigMap "kubelet-config-1.18" in namespace kube-system with the configuration for the kubelets in the cluster[upload-certs] Skipping phase. Please see --upload-certs[bootstrap-token] Using token: 47wg36.zm1tr8lfosat2943[bootstrap-token] Configuring bootstrap tokens, cluster-info ConfigMap, RBAC Roles[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to get nodes[bootstrap-token] configured RBAC rules to allow Node Bootstrap tokens to post CSRs in order for nodes to get long term certificate credentials[bootstrap-token] configured RBAC rules to allow the csrapprover controller automatically approve CSRs from a Node Bootstrap Token[bootstrap-token] configured RBAC rules to allow certificate rotation for all node client certificates in the cluster[bootstrap-token] Creating the "cluster-info" ConfigMap in the "kube-public" namespace[kubelet-finalize] Updating "/etc/kubernetes/kubelet.conf" to point to a rotatable kubelet client certificate and key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样，kubelet启动时需要以下参数来完成初始化</p><ul><li><code>--cert-dir="/var/lib/kubelet/pki"</code>，path to store the key and certificate it generates (optional, can use default)</li><li><code>--kubeconfig="/var/lib/kubelet/kubeconfig"</code>，A path to a <code>kubeconfig</code> file that does not yet exist; it will place the bootstrapped config file here</li><li><code>--bootstrap-kubeconfig="/var/lib/kubelet/bootstrap-kubeconfig"</code>，A path to a bootstrap <code>kubeconfig</code> file to provide the URL for the server and bootstrap credentials, e.g. a bootstrap token</li><li>Optional: instructions to rotate certificates</li></ul><p>其中/var/lib/kubelet/bootstrap-kubeconfig文件的内容格式如下</p><ul><li>user字段下使用一个token进行身份认证</li><li>certificate-authority由kubelet用来验证apiserver的服务器证书</li></ul><blockquote><p><a href="https://kubernetes.io/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/#kubelet-configuration">https://kubernetes.io/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/#kubelet-configuration</a></p></blockquote><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Config<span class="token key atrule">clusters</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">cluster</span><span class="token punctuation">:</span>    <span class="token key atrule">certificate-authority</span><span class="token punctuation">:</span> /var/lib/kubernetes/ca.pem    <span class="token key atrule">server</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//my.server.example.com<span class="token punctuation">:</span><span class="token number">6443</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> bootstrap<span class="token key atrule">contexts</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">context</span><span class="token punctuation">:</span>    <span class="token key atrule">cluster</span><span class="token punctuation">:</span> bootstrap    <span class="token key atrule">user</span><span class="token punctuation">:</span> kubelet<span class="token punctuation">-</span>bootstrap  <span class="token key atrule">name</span><span class="token punctuation">:</span> bootstrap<span class="token key atrule">current-context</span><span class="token punctuation">:</span> bootstrap<span class="token key atrule">preferences</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">users</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kubelet<span class="token punctuation">-</span>bootstrap  <span class="token key atrule">user</span><span class="token punctuation">:</span>    <span class="token key atrule">token</span><span class="token punctuation">:</span> 07401b.f395accd246ae52d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对于<code>kubeconfig</code>文件</p><blockquote><p>在启动 kubelet 时，如果 <code>--kubeconfig</code> 标志所指定的文件并不存在，会使用通过标志 <code>--bootstrap-kubeconfig</code> 所指定的启动引导 kubeconfig 配置来向 API 服务器请求客户端证书。 在证书请求被批复并被 kubelet 收回时，一个引用所生成的密钥和所获得证书的 kubeconfig 文件会被写入到通过 <code>--kubeconfig</code> 所指定的文件路径下。 证书和密钥文件会被放到 <code>--cert-dir</code> 所指定的目录中</p></blockquote><p>引导节点拿到的证书是kubelet客户端证书，用来和apiserver通信。kubelet也可以作为服务向外暴露，证书的来源有</p><ul><li>使用通过 <code>--tls-private-key-file</code> 和 <code>--tls-cert-file</code> 所设置的密钥和证书</li><li>如果没有提供密钥和证书，则创建自签名的密钥和证书</li><li>通过 CSR API 从集群服务器请求服务证书</li></ul><p>配置完成后最终<code>kubelet</code>使用该<code>kubeconfig</code>文件和<code>apiserver</code>通信，注意这个文件名叫做<code>kubelet-client-current.pem</code></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">clusters</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">cluster</span><span class="token punctuation">:</span>    <span class="token key atrule">certificate-authority-data</span><span class="token punctuation">:</span> LS0tLS1CRUdJTiBDRVJUSUZJQ0F<span class="token punctuation">...</span>    <span class="token key atrule">server</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//192.168.1.10<span class="token punctuation">:</span><span class="token number">6443</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>cluster<span class="token key atrule">contexts</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">context</span><span class="token punctuation">:</span>    <span class="token key atrule">cluster</span><span class="token punctuation">:</span> test<span class="token punctuation">-</span>cluster    <span class="token key atrule">user</span><span class="token punctuation">:</span> system<span class="token punctuation">:</span>node<span class="token punctuation">:</span>test<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>node<span class="token punctuation">-</span><span class="token number">1</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> system<span class="token punctuation">:</span>node<span class="token punctuation">:</span>test<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>node<span class="token punctuation">-</span><span class="token number">1</span><span class="token key atrule">current-context</span><span class="token punctuation">:</span> system<span class="token punctuation">:</span>node<span class="token punctuation">:</span>test<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>node<span class="token punctuation">-</span><span class="token number">1</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> Config<span class="token key atrule">preferences</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token key atrule">users</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> system<span class="token punctuation">:</span>node<span class="token punctuation">:</span>test<span class="token punctuation">-</span>cluster<span class="token punctuation">-</span>node<span class="token punctuation">-</span><span class="token number">1</span>  <span class="token key atrule">user</span><span class="token punctuation">:</span>    <span class="token key atrule">client-certificate</span><span class="token punctuation">:</span> /var/lib/kubelet/pki/kubelet<span class="token punctuation">-</span>client<span class="token punctuation">-</span>current.pem    <span class="token key atrule">client-key</span><span class="token punctuation">:</span> /var/lib/kubelet/pki/kubelet<span class="token punctuation">-</span>client<span class="token punctuation">-</span>current.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="eks集群的kubelet启动引导"><a href="#eks集群的kubelet启动引导" class="headerlink" title="eks集群的kubelet启动引导"></a>eks集群的kubelet启动引导</h2><p>eks节点使用bootstrap启动脚本来完成kubelet的初始化，启动的完整参数如下</p><ul><li><p>没有指定<code>--bootstrap-kubeconfig</code>，意味着不需要进行TLS token的初始化</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/bin/kubelet --cloud-provider aws --image-credential-provider-config /etc/eks/ecr-credential-provider/ecr-credential-provider-config --image-credential-provider-bin-dir /etc/eks/ecr-credential-provider <span class="token parameter variable">--config</span> /etc/kubernetes/kubelet/kubelet-config.json <span class="token parameter variable">--kubeconfig</span> /var/lib/kubelet/kubeconfig --container-runtime remote --container-runtime-endpoint unix:///run/containerd/containerd.sock --node-ip<span class="token operator">=</span><span class="token number">192.168</span>.27.37 --pod-infra-container-image<span class="token operator">=</span><span class="token number">918309763551</span>.dkr.ecr.cn-north-1.amazonaws.com.cn/eks/pause:3.5 <span class="token parameter variable">--v</span><span class="token operator">=</span><span class="token number">2</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><code>/var/lib/kubelet/pki/</code>路径下存在证书</p><pre class="line-numbers language-none"><code class="language-none">-rw------- 1 root root 1378 May 20 04:41 kubelet-server-2023-05-20-04-41-35.pemlrwxrwxrwx 1 root root   59 May 20 04:41 kubelet-server-current.pem -&gt; /var/lib/kubelet/pki/kubelet-server-2023-05-20-04-41-35.pem<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><p>我们启动一个新的eks优化ami查看这些路径下有无这些文件，</p><pre class="line-numbers language-none"><code class="language-none">aws ec2 run-instances --image-id ami-0b779da1a68e38cf1 \--instance-type m4.large \--key-name temp-key \--count 1 \    --subnet-id subnet-027025e9d9760acdd \    --security-group-ids sg-096df1a0cb9a6d7e9 \    --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=testena}]' 'ResourceType=volume,Tags=[{Key=Name,Value=testena}]'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看<code>kubeconfig</code>实际上是由bootstrap替换得到的</p><pre class="line-numbers language-none"><code class="language-none">$ cat /var/lib/kubelet/kubeconfigapiVersion: v1kind: Configclusters:- cluster:    certificate-authority: /etc/kubernetes/pki/ca.crt    server: MASTER_ENDPOINT  name: kubernetescontexts:- context:    cluster: kubernetes    user: kubelet  name: kubeletcurrent-context: kubeletusers:- name: kubelet  user:    exec:      apiVersion: client.authentication.k8s.io/v1beta1      command: /usr/bin/aws-iam-authenticator      args:        - "token"        - "-i"        - "CLUSTER_NAME"        - --region        - "AWS_REGION"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>/var/lib/kubelet/pki/</code>路径下并无文件，因此实际上是通过kubelet启动时生成的</p><p>通常的eks节点kubelet启动日志</p><p><img src="https://s2.loli.net/2023/05/20/5A7gLKRTDcFYZNt.png"></p><p>我们修改并额外指定kubelet启动参数为<code>/var/lib/kubelet/bootstrap-kubeconfig</code></p><pre class="line-numbers language-none"><code class="language-none">mv /var/lib/kubelet/kubeconfig /var/lib/kubelet/bootstrap-kubeconfigKUBELET_EXTRA_ARGS="--bootstrap-kubeconfig /var/lib/kubelet/bootstrap-kubeconfig $KUBELET_EXTRA_ARGS"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此时kubelet无法启动，等待客户端证书签发</p><p><img src="https://s2.loli.net/2023/05/20/ZO273rTIkw5AQmF.png"></p><p><code>/var/lib/kubelet/pki/</code>多了一个文件<code>kubelet-client.key.tmp</code></p><ul><li>kubelet生成cliet私钥，使用该私钥生成csr</li><li>之后向apiserver发送csr，请求公钥证书验证签名</li></ul><pre class="line-numbers language-none"><code class="language-none">$ lltotal 8-rw------- 1 root root  227 May 20 05:59 kubelet-client.key.tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>再次重启kubelet，仍旧保持同样的结果</p><p><img src="https://s2.loli.net/2023/05/20/FSNUIXKhVBgqvPQ.png"></p><p>手动通过csr</p><pre class="line-numbers language-none"><code class="language-none">$ kubectl get csrnode-csr-NvE0ty-HnP-dA435aze3oo3ubHfHI70ZX_9fTIss0Z0[ec2-user@ip-172-31-22-99 ~]$ kubectl certificate approve node-csr-NvE0ty-HnP-dA435aze3oo3ubHfHI70ZX_9fTIss0Z0certificatesigningrequest.certificates.k8s.io/node-csr-NvE0ty-HnP-dA435aze3oo3ubHfHI70ZX_9fTIss0Z0 approved<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此时kubelet显示csr已经通过，等待签发证书，但是这一步显然是不行的（可能会绕过sts）</p><pre class="line-numbers language-none"><code class="language-none">"Waiting for client certificate to be issued"certificate signing request node-csr-NvE0ty-HnP-dA435aze3oo3ubHfHI70ZX_9fTIss0Z0 is approved, waiting to be issued<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>由于eks的apiserver我们看不到，因此无从知晓kubelet的集权是怎么完成的，目前推测和serviceaccount类似都是使用webhook的方式完成的。</p><p>接下来，进入节点并停止kubelet服务，手动使用预置参数启动kubelet</p><pre class="line-numbers language-none"><code class="language-none"># /usr/bin/kubelet --config /etc/kubernetes/kubelet/kubelet-config.json --kubeconfig /var/lib/kubelet/kubeconfig --container-runtime-endpoinunix:///run/containerd/containerd.sock --image-credential-provider-config /etc/eks/image-credential-provider/config.json --image-credential-provider-bin-dir /etc/eks/image-credential-provider --node-ip=192.168.31.153 --pod-infra-container-image=918309763551.dkr.ecr.cn-north-1.amazonaws.com.cn/eks/pause:3.5 --v=2 --cloud-provider=aws --container-runtime=remote --node-labels=eks.amazonaws.com/sourceLaunchTemplateVersion=1,alpha.eksctl.io/cluster-name=test124,alpha.eksctl.io/nodegroup-name=test124-ng6,eks.amazonaws.com/nodegroup-image=ami-0b779da1a68e38cf1,eks.amazonaws.com/capacityType=ON_DEMAND,eks.amazonaws.com/nodegroup=test124-ng6,eks.amazonaws.com/sourceLaunchTemplateId=lt-0adf6b991b5366a98 --max-pods=58<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看kubelet日志</p><ul><li><p>确实存在csr申请和kubelet证书签发</p><pre class="line-numbers language-none"><code class="language-none">server.go:1175] "Started kubelet"server.go:155] "Starting to listen" address="0.0.0.0" port=10250...log.go:198] http: TLS handshake error from 192.168.9.40:33148: no serving certificate available for the kubelet...csr.go:261] certificate signing request csr-2blqg is approved, waiting to be issuedcsr.go:257] certificate signing request csr-2blqg is issuedcertificate_manager.go:270] kubernetes.io/kubelet-serving: Certificate expiration is 2024-05-19 08:05:00 +0000 UTC, rotation deadline is 2024-04-09 08:32:10.925495309 +0000 UTCcertificate_manager.go:270] kubernetes.io/kubelet-serving: Waiting 7800h21m57.699693545s for next certificate rotationcertificate_manager.go:270] kubernetes.io/kubelet-serving: Certificate expiration is 2024-05-19 08:05:00 +0000 UTC, rotation deadline is 2024-02-19 02:05:12.905986938 +0000 UTCcertificate_manager.go:270] kubernetes.io/kubelet-serving: Waiting 6593h54m58.680004839s for next certificate rotation<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>查看证书内容，kubelet<code>的用户组是</code>system:nodes， 用户名为system:node:ip-192-168-31-153.cn-north-1.compute.internal。<code>kube-apiserver</code>就可以基于Node Authorizer来限制<code>kubelet</code>只能读取和修改本节点上的资源</p><pre class="line-numbers language-none"><code class="language-none">$ sudo openssl x509 -noout -text -in /var/lib/kubelet/pki/kubelet-server-current.pemCertificate:    Data:        Version: 3 (0x2)        Serial Number:            2c:26:45:8d:d2:56:39:64:33:b4:b0:c6:6f:82:e7:66:14:f7:55:b9    Signature Algorithm: sha256WithRSAEncryption        Issuer: CN=kubernetes        Validity            Not Before: May 20 08:05:00 2023 GMT            Not After : May 19 08:05:00 2024 GMT        Subject: O=system:nodes, CN=system:node:ip-192-168-31-153.cn-north-1.compute.internal        Subject Public Key Info:            Public Key Algorithm: id-ecPublicKey                Public-Key: (256 bit)                pub:                    04:25:36:df:f1:44:30:00:f7:62:43:7a:f3:cc:21:                    22:ee:ed:40:40:0c:0b:28:2c:87:16:4f:bd:9b:c5:                    70:83:e3:15:8a:2c:b9:f1:94:ca:53:95:d8:ee:42:                    b4:21:ab:85:a6:25:0f:71:b8:2d:c6:b2:08:ce:e0:                    d9:d1:c3:87:a0                ASN1 OID: prime256v1                NIST CURVE: P-256<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>这之后逻辑上kubelet会使用这个证书访问apiserver，但是实际上并没有用到这个证书。为了验证我们手动将<code>/var/lib/kubelet/pki</code>下的文件全部删除</p><pre class="line-numbers language-none"><code class="language-none">rm -rf /var/lib/kubelet/pki<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是经过一段时间后，节点并没有进入not ready状态，并且没有任何影响</p><p>那么接下来的问题在于</p><p>（1）如果不需要客户端证书，那为什么还需要申请呢？</p><p>目前看来是由于kubelet需要对外暴露服务，所以通过 CSR API 从集群服务器请求服务证书</p><blockquote><p><a href="https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/#client-and-serving-certificates">https://kubernetes.io/zh-cn/docs/reference/access-authn-authz/kubelet-tls-bootstrapping/#client-and-serving-certificates</a></p></blockquote><blockquote><p><code>kubelet</code>同样对外暴露了HTTPS服务，其客户端主要是<code>kube-apiserver</code>和一些监控组件，如<code>metric-server</code>。<code>kube-apiserver</code>需要访问<code>kubelet</code>来获取容器的日志和执行命令（kubectl logs/exec)， 监控组件需要访问<code>kubelet</code>暴露的cadvisor接口来获取监控信息</p><p>在<code>kubelet</code>在启动时，如果没有指定服务端证书路径，会创建一个自签的CA证书，并使用该CA为自己签发服务端证书</p></blockquote><p>在<code>kubelet</code>配置文件配置<code>serverTLSBootstrap</code>为true就可以启用这项特性，在eks节点上kubelet确实配置为<code>"serverTLSBootstrap": true</code></p><p>也就是说，这里为kubelet签发的并不是客户端证书，而是服务端证书。</p><p>（2）eks节点究竟是使用什么来进行apiserver的认证呢？</p><p>上面的分析表明，eks节点不是通过签发客户端证书和apiserver通信的（手动签发实际上会卡在等待issued）。目前唯一能看到的和kubelet与apiserver通信的配置就只有<code>/var/lib/kubelet/kubeconfig</code>文件</p><p>手动修改节点上的default凭证会导致节点进入not ready状态，可能是kubelet在使用<code>/usr/bin/aws-iam-authenticator</code>获取tokne后，请求没有权限导致的。</p><p>我们直接拿<code>/usr/bin/aws-iam-authenticator</code>生成的token请求apiserver</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/usr/bin/aws-iam-authenticator token <span class="token parameter variable">-i</span> test124<span class="token function">curl</span> <span class="token parameter variable">-k</span> <span class="token parameter variable">--header</span> <span class="token string">"Authorization: Bearer xxxxxxxxxxxxxxxxxxxx"</span> https://C9611E71A15AC11DE8CF33921D4BC09B.yl4.cn-north-1.eks.amazonaws.com.cn<span class="token punctuation">{</span>  <span class="token string">"kind"</span><span class="token builtin class-name">:</span> <span class="token string">"Status"</span>,  <span class="token string">"apiVersion"</span><span class="token builtin class-name">:</span> <span class="token string">"v1"</span>,  <span class="token string">"metadata"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,  <span class="token string">"status"</span><span class="token builtin class-name">:</span> <span class="token string">"Failure"</span>,  <span class="token string">"message"</span><span class="token builtin class-name">:</span> <span class="token string">"forbidden: User <span class="token entity" title="\&quot;">\"</span>system:node:ip-192-168-31-153.cn-north-1.compute.internal<span class="token entity" title="\&quot;">\"</span> cannot get path <span class="token entity" title="\&quot;">\"</span>/<span class="token entity" title="\&quot;">\"</span>"</span>,  <span class="token string">"reason"</span><span class="token builtin class-name">:</span> <span class="token string">"Forbidden"</span>,  <span class="token string">"details"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,  <span class="token string">"code"</span><span class="token builtin class-name">:</span> <span class="token number">403</span><span class="token punctuation">}</span><span class="token comment"># 无权限的请求结果</span><span class="token punctuation">{</span>  <span class="token string">"kind"</span><span class="token builtin class-name">:</span> <span class="token string">"Status"</span>,  <span class="token string">"apiVersion"</span><span class="token builtin class-name">:</span> <span class="token string">"v1"</span>,  <span class="token string">"metadata"</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,  <span class="token string">"status"</span><span class="token builtin class-name">:</span> <span class="token string">"Failure"</span>,  <span class="token string">"message"</span><span class="token builtin class-name">:</span> <span class="token string">"Unauthorized"</span>,  <span class="token string">"reason"</span><span class="token builtin class-name">:</span> <span class="token string">"Unauthorized"</span>,  <span class="token string">"code"</span><span class="token builtin class-name">:</span> <span class="token number">401</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>那么接下来的问题在于，为什么修改默认凭证后，过了10-15分钟才会出现无权限的问题</p><p>查看源码有如下描述，可见token的超时时间为15分钟</p><blockquote><p><a href="https://github.com/kubernetes-sigs/aws-iam-authenticator/blob/master/pkg/token/token.go#L82">https://github.com/kubernetes-sigs/aws-iam-authenticator/blob/master/pkg/token/token.go#L82</a></p></blockquote><pre class="line-numbers language-none"><code class="language-none">const (// The sts GetCallerIdentity request is valid for 15 minutes regardless of this parameters value after it has been// signed, but we set this unused parameter to 60 for legacy reasons (we check for a value between 0 and 60 on the// server side in 0.3.0 or earlier).  IT IS IGNORED.  If we can get STS to support x-amz-expires, then we should// set this parameter to the actual expiration, and make it configurable.requestPresignParam = 60// The actual token expiration (presigned STS urls are valid for 15 minutes after timestamp in x-amz-date).presignedURLExpiration = 15 * time.Minutev1Prefix               = "k8s-aws-v1."maxTokenLenBytes       = 1024 * 4clusterIDHeader        = "x-k8s-aws-id"// Format of the X-Amz-Date header used for expiration// https://golang.org/pkg/time/#pkg-constantsdateHeaderFormat   = "20060102T150405Z"kindExecCredential = "ExecCredential"execInfoEnvKey     = "KUBERNETES_EXEC_INFO"stsServiceID       = "sts")<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单纯将kubeconfig文件修改后是不行的，可能是由于kubelet已经将配置文件读取到内存中了，之后手动删除authenticator，发现过一段时间后出现以下报错</p><pre class="line-numbers language-none"><code class="language-none">kubelet_node_status.go:539] "Error updating node status, will retry" err="error getting node \"ip-192-168-13-54.cn-north-1.compute.internal\": Get \"https://xxxxxxxxB.yl4.cn-north-1.eks.amazonaws.com.cn/api/v1/nodes/ip-192-168-13-54.cn-north-1.compute.internal?resourceVersion=0&amp;timeout=10s\": getting credentials: exec: fork/exec /usr/bin/aws-iam-authenticator: no such file or directory"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同样在检查5次节点状态后超时，可见kubelet确实是通过authenticator的token来与apiserver通信的</p>]]></content>
      
      
      <categories>
          
          <category> kubernetes </category>
          
          <category> aws </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>eks零零散散小知识</title>
      <link href="/2023/05/23/eks-ling-ling-san-san-xiao-zhi-shi/"/>
      <url>/2023/05/23/eks-ling-ling-san-san-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<ul><li><a href="#eks%E7%9B%B8%E5%85%B3%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86%E8%AE%B0%E5%BD%95">EKS相关的小知识记录</a><ul><li><a href="#%E8%8A%82%E7%82%B9asg%E7%9B%B8%E5%85%B3">节点，ASG相关</a><ul><li><a href="#%E8%8A%82%E7%82%B9%E7%BB%84%E5%90%AF%E5%8A%A8%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%90%88%E5%B9%B6">节点组启动模板的合并</a></li><li><a href="#%E8%8A%82%E7%82%B9%E7%BB%84%E7%9A%84%E5%A4%9A%E5%8F%AF%E7%94%A8%E5%8C%BA%E8%87%AA%E5%8A%A8%E5%B9%B3%E8%A1%A1">节点组的多可用区自动平衡</a></li></ul></li></ul></li></ul><h2 id="EKS相关的小知识记录"><a href="#EKS相关的小知识记录" class="headerlink" title="EKS相关的小知识记录"></a>EKS相关的小知识记录</h2><h3 id="节点，ASG相关"><a href="#节点，ASG相关" class="headerlink" title="节点，ASG相关"></a>节点，ASG相关</h3><h4 id="节点组启动模板的合并"><a href="#节点组启动模板的合并" class="headerlink" title="节点组启动模板的合并"></a>节点组启动模板的合并</h4><p>在eks创建托管节点组使用模板的情况下，eks会为您创建一个新的启动模板，该模板会合并自己的启动模板里的配置和eks的配置，这个启动模板的创建规则遵循文档【1】中的描述，其中着重描述了以下内容：<br>    不要在用户数据中指定任何启动或修改 kubelet 的命令。这是作为 Amazon EKS 合并的用户数据的一部分执行的。<br>     *注 但是这个行为当您在启动模板中指定了ami之后不会自动合并，<br>【1】<a href="https://docs.amazonaws.cn/eks/latest/userguide/launch-templates.html#launch-template-custom-ami">https://docs.amazonaws.cn/eks/latest/userguide/launch-templates.html#launch-template-custom-ami</a> </p><h4 id="节点组的多可用区自动平衡"><a href="#节点组的多可用区自动平衡" class="headerlink" title="节点组的多可用区自动平衡"></a>节点组的多可用区自动平衡</h4><p>因为节点组的后边放的是asg，所以会遵循asg规则，asg会自动平衡，描述如下：</p><blockquote><p>实例启动时，如果您指定多个可用区，会为这些可用区分配所需容量。如果执行扩展操作，Amazon EC2 Auto Scaling 会自动保持您指定的所有可用区的平衡。<br><a href="https://docs.amazonaws.cn/autoscaling/ec2/userguide/auto-scaling-groups.html">https://docs.amazonaws.cn/autoscaling/ec2/userguide/auto-scaling-groups.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AWS </tag>
            
            <tag> EKS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速测试笔记</title>
      <link href="/2023/05/22/kuai-su-ce-shi-bi-ji/"/>
      <url>/2023/05/22/kuai-su-ce-shi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="event-bridge-快速测试"><a href="#event-bridge-快速测试" class="headerlink" title="event bridge 快速测试"></a>event bridge 快速测试</h3><p>此处测试由于lambda 调用 s3 传文件 都是数据事件，没有可靠的cloud trail 所以不方便（三大数据事件还一个dynamodb）， 所以这里选用iam role 附加策略进行测试<br>创建一个测试角色 general， 然后创建eventbridge rule， 使用下边的事件模式</p><pre class="line-numbers language-none"><code class="language-none">{  "source": ["aws.iam"],  "detail-type": ["AWS API Call via CloudTrail"],  "detail": {    "eventSource": ["iam.amazonaws.com"],    "eventName": ["AttachRolePolicy"],    "requestParameters": {      "roleName": ["general"]    }  }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="eks-相关测试"><a href="#eks-相关测试" class="headerlink" title="eks 相关测试"></a>eks 相关测试</h3><pre class="line-numbers language-none"><code class="language-none">kubectl run entry --image=public.ecr.aws/amazonlinux/amazonlinux:latest --restart=Never -- sh -c "sleep infinity"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="分享一个精准分配内存的pod"><a href="#分享一个精准分配内存的pod" class="headerlink" title="分享一个精准分配内存的pod"></a>分享一个精准分配内存的pod</h4><pre class="line-numbers language-none"><code class="language-none">apiVersion: apps/v1kind: Deploymentmetadata:  namespace: default  name: memallocspec:  selector:    matchLabels:      app: memalloc  replicas: 1  template:    metadata:      labels:        app: memalloc    spec:      containers:      - name: memalloc        image: shijuliu/mem_alloc:v1        args: ["/mem_alloc","200"]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="测试sa"><a href="#测试sa" class="headerlink" title="测试sa"></a>测试sa</h4><pre class="line-numbers language-none"><code class="language-none">apiVersion: v1kind: Podmetadata:  creationTimestamp: null  labels:    run: entry  name: entryspec:  containers:  - args:    - sh    - -c    - sleep infinity    image: public.ecr.aws/amazonlinux/amazonlinux:latest    name: entry    resources: {}  serviceAccountName: felix  dnsPolicy: ClusterFirst  restartPolicy: Neverstatus: {}好用的applysed 's/felix/YOUR_SA/' pods.yaml|kubectl apply -n kube-system -f -<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取插件对应版本"><a href="#获取插件对应版本" class="headerlink" title="获取插件对应版本"></a>获取插件对应版本</h4><pre class="line-numbers language-none"><code class="language-none">aws eks describe-addon-versions --kubernetes-version 1.25 --query 'addons[].[addonName,addonVersions[].addonVersion]|[]'output[    "vpc-cni",    [        "v1.12.6-eksbuild.2",        "v1.12.6-eksbuild.1",        "v1.12.5-eksbuild.2",        "v1.12.5-eksbuild.1",        "v1.12.2-eksbuild.1",        "v1.12.0-eksbuild.2",        "v1.11.5-eksbuild.1",        "v1.11.4-eksbuild.3",        "v1.10.4-eksbuild.3"    ],    "aws-ebs-csi-driver",    [        "v1.18.0-eksbuild.1",        "v1.17.0-eksbuild.1",        "v1.16.1-eksbuild.1",        "v1.16.0-eksbuild.1",        "v1.15.1-eksbuild.1",        "v1.15.0-eksbuild.1",        "v1.14.1-eksbuild.1",        "v1.14.0-eksbuild.1",        "v1.13.0-eksbuild.3",        "v1.13.0-eksbuild.2",        "v1.13.0-eksbuild.1",        "v1.12.1-eksbuild.3",        "v1.12.1-eksbuild.2",        "v1.12.1-eksbuild.1",        "v1.11.5-eksbuild.2",        "v1.11.5-eksbuild.1"    ],    "kube-proxy",    [        "v1.25.9-eksbuild.1",        "v1.25.6-eksbuild.2",        "v1.25.6-eksbuild.1",        "v1.24.10-eksbuild.2",        "v1.24.9-eksbuild.1",        "v1.23.16-eksbuild.2",        "v1.23.15-eksbuild.1"    ],    "coredns",    [        "v1.9.3-eksbuild.3",        "v1.9.3-eksbuild.2",        "v1.8.7-eksbuild.4",        "v1.8.7-eksbuild.3",        "v1.8.4-eksbuild.2"    ],    "adot",    [        "v0.74.0-eksbuild.1",        "v0.70.0-eksbuild.1",        "v0.66.0-eksbuild.1",        "v0.62.1-eksbuild.2"    ]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="nodeshell"><a href="#nodeshell" class="headerlink" title="nodeshell"></a>nodeshell</h4><blockquote><p><a href="https://github.com/zhojiew/aws-learning-notebook/blob/main/eks/%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95%E8%8A%82%E7%82%B9%E6%97%B6%E4%BD%BF%E7%94%A8nodeshell%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97.md">https://github.com/zhojiew/aws-learning-notebook/blob/main/eks/%E6%97%A0%E6%B3%95%E7%99%BB%E5%BD%95%E8%8A%82%E7%82%B9%E6%97%B6%E4%BD%BF%E7%94%A8nodeshell%E6%94%B6%E9%9B%86%E7%B3%BB%E7%BB%9F%E6%97%A5%E5%BF%97.md</a></p></blockquote><p>直接使用特权容器挂载到pods里来获取日志</p><h5 id="使用过程"><a href="#使用过程" class="headerlink" title="使用过程"></a>使用过程</h5><p>在集群中启动如下nodeshell容器，这里可以提前封装好一些组件加速</p><ul><li>pod中使用hostpath挂载了节点的根卷</li><li>将卷挂载到pod中（可写模式）</li></ul><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">annotations</span><span class="token punctuation">:</span>    <span class="token key atrule">kubernetes.io/psp</span><span class="token punctuation">:</span> eks.privileged  <span class="token key atrule">name</span><span class="token punctuation">:</span> k9s<span class="token punctuation">-</span>shell  <span class="token key atrule">namespace</span><span class="token punctuation">:</span> default<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> bash    <span class="token key atrule">image</span><span class="token punctuation">:</span> public.ecr.aws/amazonlinux/amazonlinux<span class="token punctuation">:</span><span class="token number">2</span>    <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> IfNotPresent    <span class="token key atrule">name</span><span class="token punctuation">:</span> k9s<span class="token punctuation">-</span>shell    <span class="token key atrule">resources</span><span class="token punctuation">:</span>      <span class="token key atrule">limits</span><span class="token punctuation">:</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 100m        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi      <span class="token key atrule">requests</span><span class="token punctuation">:</span>        <span class="token key atrule">cpu</span><span class="token punctuation">:</span> 100m        <span class="token key atrule">memory</span><span class="token punctuation">:</span> 100Mi    <span class="token key atrule">securityContext</span><span class="token punctuation">:</span>      <span class="token key atrule">privileged</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">stdin</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">terminationMessagePath</span><span class="token punctuation">:</span> /dev/termination<span class="token punctuation">-</span>log    <span class="token key atrule">terminationMessagePolicy</span><span class="token punctuation">:</span> File    <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /host      <span class="token key atrule">name</span><span class="token punctuation">:</span> root<span class="token punctuation">-</span>vol      <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token punctuation">-</span> <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /var/run/secrets/kubernetes.io/serviceaccount      <span class="token key atrule">name</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>api<span class="token punctuation">-</span>access<span class="token punctuation">-</span>zh92t      <span class="token key atrule">readOnly</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>  <span class="token key atrule">dnsPolicy</span><span class="token punctuation">:</span> ClusterFirst  <span class="token key atrule">enableServiceLinks</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hostNetwork</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">hostPID</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">nodeName</span><span class="token punctuation">:</span> ip<span class="token punctuation">-</span>192<span class="token punctuation">-</span>168<span class="token punctuation">-</span>6<span class="token punctuation">-</span>84.cn<span class="token punctuation">-</span>north<span class="token punctuation">-</span>1.compute.internal  <span class="token key atrule">preemptionPolicy</span><span class="token punctuation">:</span> PreemptLowerPriority  <span class="token key atrule">priority</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never  <span class="token key atrule">schedulerName</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>scheduler  <span class="token key atrule">securityContext</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token key atrule">serviceAccount</span><span class="token punctuation">:</span> default  <span class="token key atrule">serviceAccountName</span><span class="token punctuation">:</span> default  <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">0</span>  <span class="token key atrule">tolerations</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">operator</span><span class="token punctuation">:</span> Exists  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> <span class="token key atrule">hostPath</span><span class="token punctuation">:</span>      <span class="token key atrule">path</span><span class="token punctuation">:</span> /      <span class="token key atrule">type</span><span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> root<span class="token punctuation">-</span>vol  <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>api<span class="token punctuation">-</span>access<span class="token punctuation">-</span>zh92t    <span class="token key atrule">projected</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultMode</span><span class="token punctuation">:</span> <span class="token number">420</span>      <span class="token key atrule">sources</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> <span class="token key atrule">serviceAccountToken</span><span class="token punctuation">:</span>          <span class="token key atrule">expirationSeconds</span><span class="token punctuation">:</span> <span class="token number">3607</span>          <span class="token key atrule">path</span><span class="token punctuation">:</span> token      <span class="token punctuation">-</span> <span class="token key atrule">configMap</span><span class="token punctuation">:</span>          <span class="token key atrule">items</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">key</span><span class="token punctuation">:</span> ca.crt            <span class="token key atrule">path</span><span class="token punctuation">:</span> ca.crt          <span class="token key atrule">name</span><span class="token punctuation">:</span> kube<span class="token punctuation">-</span>root<span class="token punctuation">-</span>ca.crt      <span class="token punctuation">-</span> <span class="token key atrule">downwardAPI</span><span class="token punctuation">:</span>          <span class="token key atrule">items</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> <span class="token key atrule">fieldRef</span><span class="token punctuation">:</span>              <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1              <span class="token key atrule">fieldPath</span><span class="token punctuation">:</span> metadata.namespace            <span class="token key atrule">path</span><span class="token punctuation">:</span> namespace<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进入到挂载目录并chroot</p><pre class="line-numbers language-none"><code class="language-none">chroot /host<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用脚本收集工具收集脚本</p><pre class="line-numbers language-none"><code class="language-none">sudo bash /opt/cni/bin/aws-cni-support.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>授权节点访问s3的权限，并将日志文件上传到s3中</p><pre class="line-numbers language-none"><code class="language-none">sh-4.2# aws s3 cp /var/log/eks_i-09353e3192ec4a400_2023-04-15_0827-UTC_0.7.1.tar.gz s3://temptest/ekslog.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从s3中下载日志文件并进行之后的排障工作即可</p><h3 id="测试用网站"><a href="#测试用网站" class="headerlink" title="测试用网站"></a>测试用网站</h3><p><a href="https://lightly.teamcode.com/dashboard">https://lightly.teamcode.com/dashboard</a></p>]]></content>
      
      
      <categories>
          
          <category> AWS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes service account token</title>
      <link href="/2023/05/11/kubernetes-service-account-token/"/>
      <url>/2023/05/11/kubernetes-service-account-token/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>从k8s 1.21 开始启用了serviceaccount的BundServiceAccountTokenVolume  功能，这个功能能够自动将sa 给挂载到pods 里并且生成一个token 用于通信， 但是使用这个功能需要 kubernetes client 的版本高于指定版本开发的软件才能用<br>这里的版本是kubernetes clinet而不是其他版本，需要注意。</p><ul><li>Go v0.15.7 及更高版本</li><li>Python v12.0.0 及更高版本</li><li>Java v9.0.0 及更高版本</li><li>Javascript v0.10.3 及更高版本</li><li>Ruby master branch</li><li>Haskell v0.3.0.0</li></ul><p>这个过期时间默认就是1小时（3600秒）更改不了，可以看到在pods 的yaml中被自动添加如下部分：</p><pre class="line-numbers language-none"><code class="language-none">- mountPath: /var/run/secrets/kubernetes.io/serviceaccount  name: kube-api-access-cwbkz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后根据这个路径的文件cat 一下就可以用这个去jwt.io进行解码，可以看到warn time 是 iat （issue at） 的一小时之后<br>但是从这个token看不到extend时间， </p><p><img src="https://raw.githubusercontent.com/Felixlx/images/main/20230511174830.png"></p><h3 id="在官方文档里有几个kubeapi的参数"><a href="#在官方文档里有几个kubeapi的参数" class="headerlink" title="在官方文档里有几个kubeapi的参数"></a>在官方文档里有几个kubeapi的参数</h3><p>默认这个最大过期时间是无限，所以能申请无穷大的token</p><pre class="line-numbers language-none"><code class="language-none">--service-account-max-token-expiration durationThe maximum validity duration of a token created by the service account token issuer. If an otherwise valid TokenRequest with a validity duration larger than this value is requested, a token will be issued with a validity duration of this value.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以延期的时间，这里eks设置的就是90天，同事忽略上边那个参数，所有的token都是1小时过期之后还能用90天，</p><pre class="line-numbers language-none"><code class="language-none">--service-account-extend-token-expiration     Default: trueTurns on projected service account expiration extension during token generation, which helps safe transition from legacy token to bound service account token feature. If this flag is enabled, admission injected tokens would be extended up to 1 year to prevent unexpected failure during transition, ignoring value of service-account-max-token-expiration.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><a href="https://v1-23.docs.kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/">https://v1-23.docs.kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/</a></p></blockquote><h3 id="怎么确认是否触发了延长机制"><a href="#怎么确认是否触发了延长机制" class="headerlink" title="怎么确认是否触发了延长机制"></a>怎么确认是否触发了延长机制</h3><p>在aws eks平台，想要查看这个问题可以通过开启审计日志来查看<br>当打开审计日志，同时token超过一小时，就会触发告警，发送到审计日志，具体的查询语句如下</p><pre class="line-numbers language-none"><code class="language-none">fields @timestamp| filter @logStream like /kube-apiserver-audit/| filter @message like /seconds after warning threshold/| parse @message "subject: *, seconds after warning threshold:*\"" as subject, elapsedtime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://docs.amazonaws.cn/eks/latest/userguide/service-accounts.html#identify-pods-using-stale-tokens">https://docs.amazonaws.cn/eks/latest/userguide/service-accounts.html#identify-pods-using-stale-tokens</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jq学习中</title>
      <link href="/2023/05/11/jq-xue-xi-zhong/"/>
      <url>/2023/05/11/jq-xue-xi-zhong/</url>
      
        <content type="html"><![CDATA[<h2 id="jq命令的使用"><a href="#jq命令的使用" class="headerlink" title="jq命令的使用"></a>jq命令的使用</h2><h3 id="筛选一个数据并过滤掉空值（处理一次）后为其拼接字符串-前缀"><a href="#筛选一个数据并过滤掉空值（处理一次）后为其拼接字符串-前缀" class="headerlink" title="筛选一个数据并过滤掉空值（处理一次）后为其拼接字符串 (前缀)"></a>筛选一个数据并过滤掉空值（处理一次）后为其拼接字符串 (前缀)</h3><pre class="line-numbers language-none"><code class="language-none">aws ecr list-images --repository-name felixreponame|jq -r '.[]|map(select(.imageTag != null and .imageTag != ""))|map("felixreponame:" + .imageTag)'[  "felixreponame:csi-node-driver-registrarv2.7.0",  "felixreponame:csi-node-driver-registrarv1.3.0",  "felixreponame:testpushlatest",  "felixreponame:felixreponametestpush",  "felixreponame:testpush"]另一个方便的写法aws ecr list-images --repository-name felixecr|jq -r '.[]|map("felixecr:" + (select(.imageTag != null)|.imageTag)|tostring )' |head -5[  "felixecr:csi-node-driver-registrarv2.7.0",  "felixecr:csi-node-driver-registrarv1.3.0",  "felixecr:testpushlatest",  "felixecr:felixecrtestpush",<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小坑，，，一直尝试join，但是其实在jq里 只是一个把数组拼接的命令<br>join()是jq内置的一个字符串拼接函数，用于将数组元素按照指定的分隔符拼接为一个字符串。以下是join()函数的使用方法：</p><pre class="line-numbers language-none"><code class="language-none">join(separator)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，separator表示分隔符，可以是任意字符串。join()函数将数组中的所有元素按照分隔符进行拼接，并返回一个新的字符串。例如，以下jq表达式将一个数组中的元素拼接为一个以逗号分隔的字符串：</p><pre class="line-numbers language-none"><code class="language-none">["foo", "bar", "baz"] | join(",")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">"foo,bar,baz"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在使用join()函数时，需要注意的是，该函数只能用于数组类型的数据，不能用于字符串类型的数据。如果要将一个字符串按照指定分隔符拆分为数组，可以使用split()函数。</p><p>以下是一个示例，用于将一个以空格分隔的字符串拆分为数组，并将数组元素拼接为一个以逗号分隔的字符串：</p><pre class="line-numbers language-none"><code class="language-none">"foo bar baz" | split(" ") | join(",")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">"foo,bar,baz"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要注意的是，在使用join()函数时，如果数组中包含空字符串或null值，这些值将被忽略并不会出现在拼接后的字符串中。如果需要保留这些值，可以使用map()函数将它们转换为特定的字符串或标记，然后再使用join()函数进行拼接。</p><p>例如，以下示例用于将一个数组中的元素拼接为一个以逗号分隔的字符串，并在空字符串和null值处插入标记<empty>：</empty></p><p>json</p><pre class="line-numbers language-none"><code class="language-none">echo ["foo", "", "bar", null, "baz"] | map(if . == "" or . == null then "&lt;empty&gt;" else . end) | join(",")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">"foo,&lt;empty&gt;,bar,&lt;empty&gt;,baz"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述示例使用了map()函数，将空字符串和null值转换为<empty>标记，然后使用join()函数将所有元素拼接为一个字符串。</empty></p>]]></content>
      
      
      
        <tags>
            
            <tag> jq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xray 采样规则测试</title>
      <link href="/2023/05/10/xray-cai-yang-gui-ze-ce-shi/"/>
      <url>/2023/05/10/xray-cai-yang-gui-ze-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>本文follow @zhaojiew 的测试进行，原文连接如下:<br><a href="https://github.com/zhojiew/aws-learning-notebook/blob/main/xray/xray%E9%80%9A%E8%BF%87%E8%AE%BE%E7%BD%AE%E9%87%87%E6%A0%B7%E8%A7%84%E5%88%99%E5%AF%B9%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4.md">https://github.com/zhojiew/aws-learning-notebook/blob/main/xray/xray%E9%80%9A%E8%BF%87%E8%AE%BE%E7%BD%AE%E9%87%87%E6%A0%B7%E8%A7%84%E5%88%99%E5%AF%B9%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4.md</a></p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化环境-安装npm"><a href="#初始化环境-安装npm" class="headerlink" title="初始化环境 安装npm"></a>初始化环境 安装npm</h3><pre class="line-numbers language-none"><code class="language-none">npm init -ynpm install aws-xray-sdknpm install aws-sdknpm install express<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="起一个express-server测试"><a href="#起一个express-server测试" class="headerlink" title="起一个express server测试"></a>起一个express server测试</h3><pre class="line-numbers language-none"><code class="language-none">// app.jsvar AWSXRay = require('aws-xray-sdk');// xray将aws sdk包装var AWS = AWSXRay.captureAWS(require('aws-sdk'));// var AWS = require('aws-sdk');// AWSXRay.config([AWSXRay.plugins.EC2Plugin, AWSXRay.plugins.ElasticBeanstalkPlugin]);AWS.config.update({ region: 'cn-north-1' });// 指定xray守护进程监听地址AWSXRay.setDaemonAddress('127.0.0.1:2000');const express = require('express')const app = express()const port = 3000app.use(AWSXRay.express.openSegment('TestPathApp'));app.get('/', (req, res) =&gt; {    var document = AWSXRay.getSegment();    // 添加注释和元数据    document.addAnnotation("mykey", "my value");    document.addMetadata("my key", "my value", "my namespace");    res.send('Hello World!')    var s3 = new AWS.S3();    var params = {};    s3.listBuckets(params, function (err, data) {        if (err) console.log(err, err.stack);        else console.log(data);    });})app.get('/testpath', (req, res) =&gt; {    res.send('test path!')})app.use(AWSXRay.express.closeSegment());app.listen(port, () =&gt; {    console.log(`Example app listening on port ${port}`)})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h3><p>为了让xray获取正确权限（没绑定instance profile所以直接命令启动）</p><pre class="line-numbers language-none"><code class="language-none">/usr/bin/xrayfor i in `seq 1 10000`; do curl localhost:3000/ ; curl localhost:3000/testpath ; sleep 0.2; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="配置采样规则"><a href="#配置采样规则" class="headerlink" title="配置采样规则"></a>配置采样规则</h3><blockquote><blockquote><p><a href="https://docs.aws.amazon.com/zh_cn/xray/latest/devguide/xray-console-sampling.html">https://docs.aws.amazon.com/zh_cn/xray/latest/devguide/xray-console-sampling.html</a><br><a href="https://docs.aws.amazon.com/zh_cn/xray/latest/devguide/xray-sdk-nodejs.html">https://docs.aws.amazon.com/zh_cn/xray/latest/devguide/xray-sdk-nodejs.html</a></p></blockquote></blockquote><h3 id="设置采样限制"><a href="#设置采样限制" class="headerlink" title="设置采样限制"></a>设置采样限制</h3><p>reservoir，每秒钟请求的采样数量<br>fixed rate，超出reservoir之后，对额外请求的百分比<br>举例，存储器容量为50，百分比为10%，如果总体请求为100，则每秒钟的采样数量为50+(100-50)*10%=55</p><p>比如 关掉默认的采样规则（都设置0，0）设置200 的优先级 采样规则匹配指定路径，这个设置0，0 然后设置400的采样规则代替默认，由于先匹配200 规则，就能够过滤掉不想要的路径的追踪</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> xray, js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>karpenter 安装使用</title>
      <link href="/2023/05/10/karpenter-an-zhuang-shi-yong/"/>
      <url>/2023/05/10/karpenter-an-zhuang-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文内容非常基础，就是熟悉一下写博客，建议不用看，就是一些官方文档内容  </p></blockquote><h2 id="karpenter-install"><a href="#karpenter-install" class="headerlink" title="karpenter install"></a>karpenter install</h2><pre class="line-numbers language-none"><code class="language-none">export KARPENTER_VERSION=v0.27.3export CLUSTER_NAME="${USER}-karpenter-demo"export AWS_DEFAULT_REGION="cn-north-1"export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"export TEMPOUT=$(mktemp)echo $KARPENTER_VERSION $CLUSTER_NAME $AWS_DEFAULT_REGION $AWS_ACCOUNT_ID $TEMPOUT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">curl -fsSL https://karpenter.sh/"${KARPENTER_VERSION}"/getting-started/getting-started-with-karpenter/cloudformation.yaml  &gt; $TEMPOUT &amp;&amp; aws cloudformation deploy   --stack-name "Karpenter-${CLUSTER_NAME}"   --template-file "${TEMPOUT}"   --capabilities CAPABILITY_NAMED_IAM   --parameter-overrides "ClusterName=${CLUSTER_NAME}"eksctl create cluster -f - &lt;&lt;EOF---apiVersion: eksctl.io/v1alpha5kind: ClusterConfigmetadata:  name: ${CLUSTER_NAME}  region: ${AWS_DEFAULT_REGION}  version: "1.24"  tags:    karpenter.sh/discovery: ${CLUSTER_NAME}iam:  withOIDC: true  serviceAccounts:  - metadata:      name: karpenter      namespace: karpenter    roleName: ${CLUSTER_NAME}-karpenter    attachPolicyARNs:    - arn:aws-cn:iam::${AWS_ACCOUNT_ID}:policy/KarpenterControllerPolicy-${CLUSTER_NAME}    roleOnly: trueiamIdentityMappings:- arn: "arn:aws-cn:iam::${AWS_ACCOUNT_ID}:role/KarpenterNodeRole-${CLUSTER_NAME}"  username: system:node:{{EC2PrivateDNSName}}  groups:  - system:bootstrappers  - system:nodesmanagedNodeGroups:- instanceType: m5.large  amiFamily: AmazonLinux2  name: ${CLUSTER_NAME}-ng  desiredCapacity: 2  minSize: 1  maxSize: 10## Optionally run on fargate# fargateProfiles:# - name: karpenter#  selectors:#  - namespace: karpenterEOFexport CLUSTER_ENDPOINT="$(aws eks describe-cluster --name ${CLUSTER_NAME} --query "cluster.endpoint" --output text)"export KARPENTER_IAM_ROLE_ARN="arn:aws-cn:iam::${AWS_ACCOUNT_ID}:role/${CLUSTER_NAME}-karpenter"echo $CLUSTER_ENDPOINT $KARPENTER_IAM_ROLE_ARN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">aws iam create-service-linked-role --aws-service-name spot.amazonaws.com || true# If the role has already been successfully created, you will see:# An error occurred (InvalidInput) when calling the CreateServiceLinkedRole operation: Service role name AWSServiceRoleForEC2Spot has been taken in this account, please try a different suffix.docker logout public.ecr.awshelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter --version ${KARPENTER_VERSION} --namespace karpenter --create-namespace   --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=${KARPENTER_IAM_ROLE_ARN}   --set settings.aws.clusterName=${CLUSTER_NAME}   --set settings.aws.defaultInstanceProfile=KarpenterNodeInstanceProfile-${CLUSTER_NAME}   --set settings.aws.interruptionQueueName=${CLUSTER_NAME}   --set controller.resources.requests.cpu=1   --set controller.resources.requests.memory=1Gi   --set controller.resources.limits.cpu=1   --set controller.resources.limits.memory=1Gi   --wait<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cat &lt;&lt;EOF | kubectl apply -f -apiVersion: karpenter.sh/v1alpha5kind: Provisionermetadata:  name: defaultspec:  requirements:    - key: karpenter.sh/capacity-type      operator: In      values: ["spot"]  limits:    resources:      cpu: 1000  providerRef:    name: default  ttlSecondsAfterEmpty: 30---apiVersion: karpenter.k8s.aws/v1alpha1kind: AWSNodeTemplatemetadata:  name: defaultspec:  subnetSelector:    karpenter.sh/discovery: ${CLUSTER_NAME}  securityGroupSelector:    karpenter.sh/discovery: ${CLUSTER_NAME}EOF测试deploymentcat &lt;&lt;EOF | kubectl apply -f -apiVersion: apps/v1kind: Deploymentmetadata:  name: inflatespec:  replicas: 0  selector:    matchLabels:      app: inflate  template:    metadata:      labels:        app: inflate    spec:  nodeSelector:disktype: ssd      terminationGracePeriodSeconds: 0      containers:        - name: inflate          image: public.ecr.aws/eks-distro/kubernetes/pause:3.7          resources:            requests:              cpu: 1EOFkubectl scale deployment inflate --replicas 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>偷跑节点组<br>由于eks控制台展示的数据是从集群内部获取的，因此当使用provisoner创建节点的时候可以打标签偷跑，<br>eks.amazonaws.com/nodegroup=ec2-user-karpenter-demo-ng<br>测试一下就是这个标签</p><pre class="line-numbers language-none"><code class="language-none">  5 apiVersion: karpenter.sh/v1alpha5  6 kind: Provisioner  7 metadata:  8   annotations:  9     kubectl.kubernetes.io/last-applied-configuration: | 10       {"apiVersion":"karpenter.sh/v1alpha5","kind":"Provisioner","metadata":{"annotations":{},"name":"default"},"spec":{"limits":{"resources":{"cpu":1000}},"providerRef":{"name":"default"},"requirements":[{"key":"karpenter.sh/capacity-type","operator":"In","values":["spot"]}],"ttlSecondsAfterEmpty":30}} 11   creationTimestamp: "2023-05-09T14:37:27Z" 12   generation: 3 13   name: default 14   resourceVersion: "337668" 15   uid: c132ec6f-06ae-4153-ad87-2eaf2de7ee6e 16 spec: 17   labels: 18     alpha.eksctl.io/nodegroup-name: ec2-user-karpenter-demo-ng 19     eks.amazonaws.com/nodegroup: ec2-user-karpenter-demo-ng 20   limits: 21     resources: 22       cpu: 1k 23   providerRef: 24     name: default 25   requirements: 26   - key: karpenter.sh/capacity-type 27     operator: In 28     values: 29     - spot 30   - key: kubernetes.io/os 31     operator: In 32     values: 33     - linux 34   - key: kubernetes.io/arch 35     operator: In 36     values: 37     - amd64 38   - key: karpenter.k8s.aws/instance-category 39     operator: In 40     values: 41     - c 42     - m 43     - r 44   - key: karpenter.k8s.aws/instance-generation 45     operator: Gt 46     values: 47     - "2" 48   ttlSecondsAfterEmpty: 30 49 status: 50   resources: 51     attachable-volumes-aws-ebs: "78" 52     cpu: "20" 53     ephemeral-storage: 41918424Ki 54     memory: 46104900Ki 55     pods: "292"~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> karpenter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一点小知识</title>
      <link href="/2023/05/07/yi-dian-xiao-zhi-shi/"/>
      <url>/2023/05/07/yi-dian-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="eks中启用secret加密"><a href="#eks中启用secret加密" class="headerlink" title="eks中启用secret加密"></a>eks中启用secret加密</h3><blockquote><p>eks可以启用为集群中加密的功能，这个功能能够确保 <em>合规性</em> ，同时不需要用户介入操作</p></blockquote><p>使用方法很简单，用户有 create grant的权限就能够为eks集群启用<br>启用过后可以看到一个creategrant的cloudtrail，这时候再用命令创建secret就能够实现自动加密<br>这里的坑是说不能删除这个key 同时不能手动revoke这个grant 否则即便加回来也不能正常使用了， 这里怀疑跟信封加密或者主密钥在eks的缓存相关，未验证。</p><pre class="line-numbers language-none"><code class="language-none">删了grant报错如下 k create secret generic --from-literal i=b testierror: failed to create secret Internal error occurred: rpc error: code = DeadlineExceeded desc = latest balancer error: connection error: desc = "transport: Error while dialing dial unix /var/run/kmsplugin/socket.sock: connect: no such file or directory"[ec2-user@ip-10-0-0-34 ~]$ k create secret generic --from-literal i=b testierror: failed to create secret Internal error occurred: rpc error: code = DeadlineExceeded desc = latest balancer error: connection error: desc = "transport: Error while dialing dial unix /var/run/kmsplugin/socket.sock: connect: no such file or directory"[ec2-user@ip-10-0-0-34 ~]$ k create secret generic --from-literal i=b testierror: failed to create secret Internal error occurred: rpc error: code = DeadlineExceeded desc = latest balancer error: connection error: desc = "transport: Error while dialing dial unix /var/run/kmsplugin/socket.sock: connect: no such file or directory"[ec2-user@ip-10-0-0-34 ~]$ k get secrets testh -o yamlapiVersion: v1data:  h: Yg==kind: Secretmetadata:  creationTimestamp: "2023-05-06T10:06:50Z"  name: testh  namespace: default  resourceVersion: "82014"  uid: 8ce8f4e0-c266-4ae7-b42b-27e24821415etype: Opaque把那个grant手动加回来报错如下[ec2-user@ip-10-0-0-34 ~]$ k create secret generic --from-literal i=b testierror: failed to create secret Internal error occurred: rpc error: code = Unknown desc = failed to encrypt AccessDeniedException:        status code: 400, request id: 2221568f-8f6e-44ce-ac5f-fcd34a571548[ec2-user@ip-10-0-0-34 ~]$ client_loop: send disconnect: Connection reset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>题外话 eks中的crt解密命令</p></blockquote><pre class="line-numbers language-none"><code class="language-none">echo -n "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJek1EVXlNVEF3TVRReU0xb1hEVE16TURVeE9EQXdNVFF5TTFvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTUpTCkF2WmZucXd0K1JncmthdDBxUURFZmxjd0w3M24wbVcyS2ltcXZ0VU1HQWVFNUV6YmlGU0FWeS9KeHdFYk1TOHAKbm1PT3hQWW01VFZMS2JQOFJaYWJ1bkpSVFRaRy9YZzhxZlplbGZSTy9GTlB1MnJqcnp1UzVlYXJheGhmaVZLcApVVGROZ1RsN0R5V2E5R1RMWU5iMjFocFZJbkFnOEEzS2RXUk9IQ0xjYUtpRHNJTC9GMmt4ajBETzFHc0ZTcSt3Cm1wUGhMN3lYeUFwNFdMRXhOWjMwb3FycHJ6Y3lxT2JrTFJiL0J5dzZ4MmxTMStoSkZ5MkRHa1RKYWxlZ2lQdy8KcnJ0VlV6eU1idFBUNEsxRW9qVzRvMXpoeHFOOUVmMnJlMWpPZG9lL01hajZLREE3Rjd3bWRLNmlGUW9RWGkrUwptR2ZWOWdNU21odmxFRFg1bEY4Q0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZCbWNxdGlnb2Z5bzJPK2NlWDdtdlMwWlM0VGtNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTJUbUtqUk5lZ01vT3hzVkduMApyWFBRbGEzQkc0clUxemVjQnMzQ3krSUVqTmM2U0xXQnhwVnlPQzIyaEh2U1dmWHI5ckdpUzJ0dXJGdlVKYUIvCjVtTStrUWh0STZ6ZVlvMzlFYjNoUTFQaCtNVkM5UGtvK1dkWEJ0dS9jRHFMTUF6WjlFSWhCM25RMnNhd0ZjbFYKcDUwOFlPWU0vNU80QjdDVUZJYzExK0FtdmJiTVNDWXBDMTJDNzlLOEgvVU9KY1pKS1UxUGRLNVllZUdqTUp0RQpFM1c5cWZHZ01NeUJFS0QzcCt3MEpuSGRNM0pMUXArR1M5bzBQWFd3czFUZlIycjAxek81MjdVYlE5a1hweGt5CjFSZ1BBU3p5VjFTMmQvd0pxeldCUi9mMERUdWZDSTZYSmN2QlRkNGFJZzJUTm9LUUUvWlI5U2prV2IrMFFSSVAKdVRVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="|base64 -d | openssl x509  -text -noout<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 未完待续 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tittle test</title>
      <link href="/2023/05/04/first-page/"/>
      <url>/2023/05/04/first-page/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题测试"><a href="#一级标题测试" class="headerlink" title="一级标题测试"></a>一级标题测试</h1><h2 id="二级标题测试"><a href="#二级标题测试" class="headerlink" title="二级标题测试"></a>二级标题测试</h2><h6 id="六级测试"><a href="#六级测试" class="headerlink" title="六级测试"></a>六级测试</h6><p><em>加粗测试</em></p><table><thead><tr><th>table</th><th>测试</th></tr></thead><tbody><tr><td>分割</td><td>1</td></tr></tbody></table><p>换行测试</p><pre class="line-numbers language-none"><code class="language-none">code test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/28/hello-world/"/>
      <url>/2023/04/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
