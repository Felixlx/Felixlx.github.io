<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kubernetes service account token</title>
      <link href="/2023/05/11/kubernetes-service-account-token/"/>
      <url>/2023/05/11/kubernetes-service-account-token/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>从k8s 1.21 开始启用了serviceaccount的BundServiceAccountTokenVolume  功能，这个功能能够自动将sa 给挂载到pods 里并且生成一个token 用于通信， 但是使用这个功能需要 kubernetes client 的版本高于指定版本开发的软件才能用<br>这里的版本是kubernetes clinet而不是其他版本，需要注意。</p><ul><li>Go v0.15.7 及更高版本</li><li>Python v12.0.0 及更高版本</li><li>Java v9.0.0 及更高版本</li><li>Javascript v0.10.3 及更高版本</li><li>Ruby master branch</li><li>Haskell v0.3.0.0</li></ul><p>这个过期时间默认就是1小时（3600秒）更改不了，可以看到在pods 的yaml中被自动添加如下部分：</p><pre class="line-numbers language-none"><code class="language-none">- mountPath: /var/run/secrets/kubernetes.io/serviceaccount  name: kube-api-access-cwbkz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后根据这个路径的文件cat 一下就可以用这个去jwt.io进行解码，可以看到warn time 是 iat （issue at） 的一小时之后<br>但是从这个token看不到extend时间， </p><p><img src="https://raw.githubusercontent.com/Felixlx/images/main/20230511174830.png"></p><h3 id="在官方文档里有几个kubeapi的参数"><a href="#在官方文档里有几个kubeapi的参数" class="headerlink" title="在官方文档里有几个kubeapi的参数"></a>在官方文档里有几个kubeapi的参数</h3><p>默认这个最大过期时间是无限，所以能申请无穷大的token</p><pre class="line-numbers language-none"><code class="language-none">--service-account-max-token-expiration durationThe maximum validity duration of a token created by the service account token issuer. If an otherwise valid TokenRequest with a validity duration larger than this value is requested, a token will be issued with a validity duration of this value.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以延期的时间，这里eks设置的就是90天，同事忽略上边那个参数，所有的token都是1小时过期之后还能用90天，</p><pre class="line-numbers language-none"><code class="language-none">--service-account-extend-token-expiration     Default: trueTurns on projected service account expiration extension during token generation, which helps safe transition from legacy token to bound service account token feature. If this flag is enabled, admission injected tokens would be extended up to 1 year to prevent unexpected failure during transition, ignoring value of service-account-max-token-expiration.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><a href="https://v1-23.docs.kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/">https://v1-23.docs.kubernetes.io/docs/reference/command-line-tools-reference/kube-apiserver/</a></p></blockquote><h3 id="怎么确认是否触发了延长机制"><a href="#怎么确认是否触发了延长机制" class="headerlink" title="怎么确认是否触发了延长机制"></a>怎么确认是否触发了延长机制</h3><p>在aws eks平台，想要查看这个问题可以通过开启审计日志来查看<br>当打开审计日志，同时token超过一小时，就会触发告警，发送到审计日志，具体的查询语句如下</p><pre class="line-numbers language-none"><code class="language-none">fields @timestamp| filter @logStream like /kube-apiserver-audit/| filter @message like /seconds after warning threshold/| parse @message "subject: *, seconds after warning threshold:*\"" as subject, elapsedtime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://docs.amazonaws.cn/eks/latest/userguide/service-accounts.html#identify-pods-using-stale-tokens">https://docs.amazonaws.cn/eks/latest/userguide/service-accounts.html#identify-pods-using-stale-tokens</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>jq学习中</title>
      <link href="/2023/05/11/jq-xue-xi-zhong/"/>
      <url>/2023/05/11/jq-xue-xi-zhong/</url>
      
        <content type="html"><![CDATA[<h2 id="jq命令的使用"><a href="#jq命令的使用" class="headerlink" title="jq命令的使用"></a>jq命令的使用</h2><h3 id="筛选一个数据并过滤掉空值（处理一次）后为其拼接字符串-前缀"><a href="#筛选一个数据并过滤掉空值（处理一次）后为其拼接字符串-前缀" class="headerlink" title="筛选一个数据并过滤掉空值（处理一次）后为其拼接字符串 (前缀)"></a>筛选一个数据并过滤掉空值（处理一次）后为其拼接字符串 (前缀)</h3><pre class="line-numbers language-none"><code class="language-none">aws ecr list-images --repository-name felixreponame|jq -r '.[]|map(select(.imageTag != null and .imageTag != ""))|map("felixreponame:" + .imageTag)'[  "felixreponame:csi-node-driver-registrarv2.7.0",  "felixreponame:csi-node-driver-registrarv1.3.0",  "felixreponame:testpushlatest",  "felixreponame:felixreponametestpush",  "felixreponame:testpush"]另一个方便的写法aws ecr list-images --repository-name felixecr|jq -r '.[]|map("felixecr:" + (select(.imageTag != null)|.imageTag)|tostring )' |head -5[  "felixecr:csi-node-driver-registrarv2.7.0",  "felixecr:csi-node-driver-registrarv1.3.0",  "felixecr:testpushlatest",  "felixecr:felixecrtestpush",<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>小坑，，，一直尝试join，但是其实在jq里 只是一个把数组拼接的命令<br>join()是jq内置的一个字符串拼接函数，用于将数组元素按照指定的分隔符拼接为一个字符串。以下是join()函数的使用方法：</p><pre class="line-numbers language-none"><code class="language-none">join(separator)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，separator表示分隔符，可以是任意字符串。join()函数将数组中的所有元素按照分隔符进行拼接，并返回一个新的字符串。例如，以下jq表达式将一个数组中的元素拼接为一个以逗号分隔的字符串：</p><pre class="line-numbers language-none"><code class="language-none">["foo", "bar", "baz"] | join(",")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">"foo,bar,baz"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在使用join()函数时，需要注意的是，该函数只能用于数组类型的数据，不能用于字符串类型的数据。如果要将一个字符串按照指定分隔符拆分为数组，可以使用split()函数。</p><p>以下是一个示例，用于将一个以空格分隔的字符串拆分为数组，并将数组元素拼接为一个以逗号分隔的字符串：</p><pre class="line-numbers language-none"><code class="language-none">"foo bar baz" | split(" ") | join(",")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">"foo,bar,baz"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要注意的是，在使用join()函数时，如果数组中包含空字符串或null值，这些值将被忽略并不会出现在拼接后的字符串中。如果需要保留这些值，可以使用map()函数将它们转换为特定的字符串或标记，然后再使用join()函数进行拼接。</p><p>例如，以下示例用于将一个数组中的元素拼接为一个以逗号分隔的字符串，并在空字符串和null值处插入标记<empty>：</empty></p><p>json</p><pre class="line-numbers language-none"><code class="language-none">echo ["foo", "", "bar", null, "baz"] | map(if . == "" or . == null then "&lt;empty&gt;" else . end) | join(",")<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-none"><code class="language-none">"foo,&lt;empty&gt;,bar,&lt;empty&gt;,baz"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述示例使用了map()函数，将空字符串和null值转换为<empty>标记，然后使用join()函数将所有元素拼接为一个字符串。</empty></p>]]></content>
      
      
      
        <tags>
            
            <tag> jq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xray 采样规则测试</title>
      <link href="/2023/05/10/xray-cai-yang-gui-ze-ce-shi/"/>
      <url>/2023/05/10/xray-cai-yang-gui-ze-ce-shi/</url>
      
        <content type="html"><![CDATA[<p>本文follow @zhaojiew 的测试进行，原文连接如下:<br><a href="https://github.com/zhojiew/aws-learning-notebook/blob/main/xray/xray%E9%80%9A%E8%BF%87%E8%AE%BE%E7%BD%AE%E9%87%87%E6%A0%B7%E8%A7%84%E5%88%99%E5%AF%B9%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4.md">https://github.com/zhojiew/aws-learning-notebook/blob/main/xray/xray%E9%80%9A%E8%BF%87%E8%AE%BE%E7%BD%AE%E9%87%87%E6%A0%B7%E8%A7%84%E5%88%99%E5%AF%B9%E8%AF%B7%E6%B1%82%E8%BF%9B%E8%A1%8C%E8%BF%87%E6%BB%A4.md</a></p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化环境-安装npm"><a href="#初始化环境-安装npm" class="headerlink" title="初始化环境 安装npm"></a>初始化环境 安装npm</h3><pre class="line-numbers language-none"><code class="language-none">npm init -ynpm install aws-xray-sdknpm install aws-sdknpm install express<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="起一个express-server测试"><a href="#起一个express-server测试" class="headerlink" title="起一个express server测试"></a>起一个express server测试</h3><pre class="line-numbers language-none"><code class="language-none">// app.jsvar AWSXRay = require('aws-xray-sdk');// xray将aws sdk包装var AWS = AWSXRay.captureAWS(require('aws-sdk'));// var AWS = require('aws-sdk');// AWSXRay.config([AWSXRay.plugins.EC2Plugin, AWSXRay.plugins.ElasticBeanstalkPlugin]);AWS.config.update({ region: 'cn-north-1' });// 指定xray守护进程监听地址AWSXRay.setDaemonAddress('127.0.0.1:2000');const express = require('express')const app = express()const port = 3000app.use(AWSXRay.express.openSegment('TestPathApp'));app.get('/', (req, res) =&gt; {    var document = AWSXRay.getSegment();    // 添加注释和元数据    document.addAnnotation("mykey", "my value");    document.addMetadata("my key", "my value", "my namespace");    res.send('Hello World!')    var s3 = new AWS.S3();    var params = {};    s3.listBuckets(params, function (err, data) {        if (err) console.log(err, err.stack);        else console.log(data);    });})app.get('/testpath', (req, res) =&gt; {    res.send('test path!')})app.use(AWSXRay.express.closeSegment());app.listen(port, () =&gt; {    console.log(`Example app listening on port ${port}`)})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="开始测试"><a href="#开始测试" class="headerlink" title="开始测试"></a>开始测试</h3><p>为了让xray获取正确权限（没绑定instance profile所以直接命令启动）</p><pre class="line-numbers language-none"><code class="language-none">/usr/bin/xrayfor i in `seq 1 10000`; do curl localhost:3000/ ; curl localhost:3000/testpath ; sleep 0.2; done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="配置采样规则"><a href="#配置采样规则" class="headerlink" title="配置采样规则"></a>配置采样规则</h3><blockquote><blockquote><p><a href="https://docs.aws.amazon.com/zh_cn/xray/latest/devguide/xray-console-sampling.html">https://docs.aws.amazon.com/zh_cn/xray/latest/devguide/xray-console-sampling.html</a><br><a href="https://docs.aws.amazon.com/zh_cn/xray/latest/devguide/xray-sdk-nodejs.html">https://docs.aws.amazon.com/zh_cn/xray/latest/devguide/xray-sdk-nodejs.html</a></p></blockquote></blockquote><h3 id="设置采样限制"><a href="#设置采样限制" class="headerlink" title="设置采样限制"></a>设置采样限制</h3><p>reservoir，每秒钟请求的采样数量<br>fixed rate，超出reservoir之后，对额外请求的百分比<br>举例，存储器容量为50，百分比为10%，如果总体请求为100，则每秒钟的采样数量为50+(100-50)*10%=55</p><p>比如 关掉默认的采样规则（都设置0，0）设置200 的优先级 采样规则匹配指定路径，这个设置0，0 然后设置400的采样规则代替默认，由于先匹配200 规则，就能够过滤掉不想要的路径的追踪</p><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> xray, js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>karpenter 安装使用</title>
      <link href="/2023/05/10/karpenter-an-zhuang-shi-yong/"/>
      <url>/2023/05/10/karpenter-an-zhuang-shi-yong/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文内容非常基础，就是熟悉一下写博客，建议不用看，就是一些官方文档内容  </p></blockquote><h2 id="karpenter-install"><a href="#karpenter-install" class="headerlink" title="karpenter install"></a>karpenter install</h2><pre class="line-numbers language-none"><code class="language-none">export KARPENTER_VERSION=v0.27.3export CLUSTER_NAME="${USER}-karpenter-demo"export AWS_DEFAULT_REGION="cn-north-1"export AWS_ACCOUNT_ID="$(aws sts get-caller-identity --query Account --output text)"export TEMPOUT=$(mktemp)echo $KARPENTER_VERSION $CLUSTER_NAME $AWS_DEFAULT_REGION $AWS_ACCOUNT_ID $TEMPOUT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">curl -fsSL https://karpenter.sh/"${KARPENTER_VERSION}"/getting-started/getting-started-with-karpenter/cloudformation.yaml  &gt; $TEMPOUT &amp;&amp; aws cloudformation deploy   --stack-name "Karpenter-${CLUSTER_NAME}"   --template-file "${TEMPOUT}"   --capabilities CAPABILITY_NAMED_IAM   --parameter-overrides "ClusterName=${CLUSTER_NAME}"eksctl create cluster -f - &lt;&lt;EOF---apiVersion: eksctl.io/v1alpha5kind: ClusterConfigmetadata:  name: ${CLUSTER_NAME}  region: ${AWS_DEFAULT_REGION}  version: "1.24"  tags:    karpenter.sh/discovery: ${CLUSTER_NAME}iam:  withOIDC: true  serviceAccounts:  - metadata:      name: karpenter      namespace: karpenter    roleName: ${CLUSTER_NAME}-karpenter    attachPolicyARNs:    - arn:aws-cn:iam::${AWS_ACCOUNT_ID}:policy/KarpenterControllerPolicy-${CLUSTER_NAME}    roleOnly: trueiamIdentityMappings:- arn: "arn:aws-cn:iam::${AWS_ACCOUNT_ID}:role/KarpenterNodeRole-${CLUSTER_NAME}"  username: system:node:{{EC2PrivateDNSName}}  groups:  - system:bootstrappers  - system:nodesmanagedNodeGroups:- instanceType: m5.large  amiFamily: AmazonLinux2  name: ${CLUSTER_NAME}-ng  desiredCapacity: 2  minSize: 1  maxSize: 10## Optionally run on fargate# fargateProfiles:# - name: karpenter#  selectors:#  - namespace: karpenterEOFexport CLUSTER_ENDPOINT="$(aws eks describe-cluster --name ${CLUSTER_NAME} --query "cluster.endpoint" --output text)"export KARPENTER_IAM_ROLE_ARN="arn:aws-cn:iam::${AWS_ACCOUNT_ID}:role/${CLUSTER_NAME}-karpenter"echo $CLUSTER_ENDPOINT $KARPENTER_IAM_ROLE_ARN<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">aws iam create-service-linked-role --aws-service-name spot.amazonaws.com || true# If the role has already been successfully created, you will see:# An error occurred (InvalidInput) when calling the CreateServiceLinkedRole operation: Service role name AWSServiceRoleForEC2Spot has been taken in this account, please try a different suffix.docker logout public.ecr.awshelm upgrade --install karpenter oci://public.ecr.aws/karpenter/karpenter --version ${KARPENTER_VERSION} --namespace karpenter --create-namespace   --set serviceAccount.annotations."eks\.amazonaws\.com/role-arn"=${KARPENTER_IAM_ROLE_ARN}   --set settings.aws.clusterName=${CLUSTER_NAME}   --set settings.aws.defaultInstanceProfile=KarpenterNodeInstanceProfile-${CLUSTER_NAME}   --set settings.aws.interruptionQueueName=${CLUSTER_NAME}   --set controller.resources.requests.cpu=1   --set controller.resources.requests.memory=1Gi   --set controller.resources.limits.cpu=1   --set controller.resources.limits.memory=1Gi   --wait<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">cat &lt;&lt;EOF | kubectl apply -f -apiVersion: karpenter.sh/v1alpha5kind: Provisionermetadata:  name: defaultspec:  requirements:    - key: karpenter.sh/capacity-type      operator: In      values: ["spot"]  limits:    resources:      cpu: 1000  providerRef:    name: default  ttlSecondsAfterEmpty: 30---apiVersion: karpenter.k8s.aws/v1alpha1kind: AWSNodeTemplatemetadata:  name: defaultspec:  subnetSelector:    karpenter.sh/discovery: ${CLUSTER_NAME}  securityGroupSelector:    karpenter.sh/discovery: ${CLUSTER_NAME}EOF测试deploymentcat &lt;&lt;EOF | kubectl apply -f -apiVersion: apps/v1kind: Deploymentmetadata:  name: inflatespec:  replicas: 0  selector:    matchLabels:      app: inflate  template:    metadata:      labels:        app: inflate    spec:  nodeSelector:disktype: ssd      terminationGracePeriodSeconds: 0      containers:        - name: inflate          image: public.ecr.aws/eks-distro/kubernetes/pause:3.7          resources:            requests:              cpu: 1EOFkubectl scale deployment inflate --replicas 5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>偷跑节点组<br>由于eks控制台展示的数据是从集群内部获取的，因此当使用provisoner创建节点的时候可以打标签偷跑，<br>eks.amazonaws.com/nodegroup=ec2-user-karpenter-demo-ng<br>测试一下就是这个标签</p><pre class="line-numbers language-none"><code class="language-none">  5 apiVersion: karpenter.sh/v1alpha5  6 kind: Provisioner  7 metadata:  8   annotations:  9     kubectl.kubernetes.io/last-applied-configuration: | 10       {"apiVersion":"karpenter.sh/v1alpha5","kind":"Provisioner","metadata":{"annotations":{},"name":"default"},"spec":{"limits":{"resources":{"cpu":1000}},"providerRef":{"name":"default"},"requirements":[{"key":"karpenter.sh/capacity-type","operator":"In","values":["spot"]}],"ttlSecondsAfterEmpty":30}} 11   creationTimestamp: "2023-05-09T14:37:27Z" 12   generation: 3 13   name: default 14   resourceVersion: "337668" 15   uid: c132ec6f-06ae-4153-ad87-2eaf2de7ee6e 16 spec: 17   labels: 18     alpha.eksctl.io/nodegroup-name: ec2-user-karpenter-demo-ng 19     eks.amazonaws.com/nodegroup: ec2-user-karpenter-demo-ng 20   limits: 21     resources: 22       cpu: 1k 23   providerRef: 24     name: default 25   requirements: 26   - key: karpenter.sh/capacity-type 27     operator: In 28     values: 29     - spot 30   - key: kubernetes.io/os 31     operator: In 32     values: 33     - linux 34   - key: kubernetes.io/arch 35     operator: In 36     values: 37     - amd64 38   - key: karpenter.k8s.aws/instance-category 39     operator: In 40     values: 41     - c 42     - m 43     - r 44   - key: karpenter.k8s.aws/instance-generation 45     operator: Gt 46     values: 47     - "2" 48   ttlSecondsAfterEmpty: 30 49 status: 50   resources: 51     attachable-volumes-aws-ebs: "78" 52     cpu: "20" 53     ephemeral-storage: 41918424Ki 54     memory: 46104900Ki 55     pods: "292"~<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> karpenter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一点小知识</title>
      <link href="/2023/05/07/yi-dian-xiao-zhi-shi/"/>
      <url>/2023/05/07/yi-dian-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="eks中启用secret加密"><a href="#eks中启用secret加密" class="headerlink" title="eks中启用secret加密"></a>eks中启用secret加密</h3><blockquote><p>eks可以启用为集群中加密的功能，这个功能能够确保 <em>合规性</em> ，同时不需要用户介入操作</p></blockquote><p>使用方法很简单，用户有 create grant的权限就能够为eks集群启用<br>启用过后可以看到一个creategrant的cloudtrail，这时候再用命令创建secret就能够实现自动加密<br>这里的坑是说不能删除这个key 同时不能手动revoke这个grant 否则即便加回来也不能正常使用了， 这里怀疑跟信封加密或者主密钥在eks的缓存相关，未验证。</p><pre class="line-numbers language-none"><code class="language-none">删了grant报错如下 k create secret generic --from-literal i=b testierror: failed to create secret Internal error occurred: rpc error: code = DeadlineExceeded desc = latest balancer error: connection error: desc = "transport: Error while dialing dial unix /var/run/kmsplugin/socket.sock: connect: no such file or directory"[ec2-user@ip-10-0-0-34 ~]$ k create secret generic --from-literal i=b testierror: failed to create secret Internal error occurred: rpc error: code = DeadlineExceeded desc = latest balancer error: connection error: desc = "transport: Error while dialing dial unix /var/run/kmsplugin/socket.sock: connect: no such file or directory"[ec2-user@ip-10-0-0-34 ~]$ k create secret generic --from-literal i=b testierror: failed to create secret Internal error occurred: rpc error: code = DeadlineExceeded desc = latest balancer error: connection error: desc = "transport: Error while dialing dial unix /var/run/kmsplugin/socket.sock: connect: no such file or directory"[ec2-user@ip-10-0-0-34 ~]$ k get secrets testh -o yamlapiVersion: v1data:  h: Yg==kind: Secretmetadata:  creationTimestamp: "2023-05-06T10:06:50Z"  name: testh  namespace: default  resourceVersion: "82014"  uid: 8ce8f4e0-c266-4ae7-b42b-27e24821415etype: Opaque把那个grant手动加回来报错如下[ec2-user@ip-10-0-0-34 ~]$ k create secret generic --from-literal i=b testierror: failed to create secret Internal error occurred: rpc error: code = Unknown desc = failed to encrypt AccessDeniedException:        status code: 400, request id: 2221568f-8f6e-44ce-ac5f-fcd34a571548[ec2-user@ip-10-0-0-34 ~]$ client_loop: send disconnect: Connection reset<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>题外话 eks中的crt解密命令</p></blockquote><pre class="line-numbers language-none"><code class="language-none">echo -n "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMvakNDQWVhZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwcmRXSmwKY201bGRHVnpNQjRYRFRJek1EVXlNVEF3TVRReU0xb1hEVE16TURVeE9EQXdNVFF5TTFvd0ZURVRNQkVHQTFVRQpBeE1LYTNWaVpYSnVaWFJsY3pDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVBBRENDQVFvQ2dnRUJBTUpTCkF2WmZucXd0K1JncmthdDBxUURFZmxjd0w3M24wbVcyS2ltcXZ0VU1HQWVFNUV6YmlGU0FWeS9KeHdFYk1TOHAKbm1PT3hQWW01VFZMS2JQOFJaYWJ1bkpSVFRaRy9YZzhxZlplbGZSTy9GTlB1MnJqcnp1UzVlYXJheGhmaVZLcApVVGROZ1RsN0R5V2E5R1RMWU5iMjFocFZJbkFnOEEzS2RXUk9IQ0xjYUtpRHNJTC9GMmt4ajBETzFHc0ZTcSt3Cm1wUGhMN3lYeUFwNFdMRXhOWjMwb3FycHJ6Y3lxT2JrTFJiL0J5dzZ4MmxTMStoSkZ5MkRHa1RKYWxlZ2lQdy8KcnJ0VlV6eU1idFBUNEsxRW9qVzRvMXpoeHFOOUVmMnJlMWpPZG9lL01hajZLREE3Rjd3bWRLNmlGUW9RWGkrUwptR2ZWOWdNU21odmxFRFg1bEY4Q0F3RUFBYU5aTUZjd0RnWURWUjBQQVFIL0JBUURBZ0trTUE4R0ExVWRFd0VCCi93UUZNQU1CQWY4d0hRWURWUjBPQkJZRUZCbWNxdGlnb2Z5bzJPK2NlWDdtdlMwWlM0VGtNQlVHQTFVZEVRUU8KTUF5Q0NtdDFZbVZ5Ym1WMFpYTXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTJUbUtqUk5lZ01vT3hzVkduMApyWFBRbGEzQkc0clUxemVjQnMzQ3krSUVqTmM2U0xXQnhwVnlPQzIyaEh2U1dmWHI5ckdpUzJ0dXJGdlVKYUIvCjVtTStrUWh0STZ6ZVlvMzlFYjNoUTFQaCtNVkM5UGtvK1dkWEJ0dS9jRHFMTUF6WjlFSWhCM25RMnNhd0ZjbFYKcDUwOFlPWU0vNU80QjdDVUZJYzExK0FtdmJiTVNDWXBDMTJDNzlLOEgvVU9KY1pKS1UxUGRLNVllZUdqTUp0RQpFM1c5cWZHZ01NeUJFS0QzcCt3MEpuSGRNM0pMUXArR1M5bzBQWFd3czFUZlIycjAxek81MjdVYlE5a1hweGt5CjFSZ1BBU3p5VjFTMmQvd0pxeldCUi9mMERUdWZDSTZYSmN2QlRkNGFJZzJUTm9LUUUvWlI5U2prV2IrMFFSSVAKdVRVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg=="|base64 -d | openssl x509  -text -noout<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 未完待续 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tittle test</title>
      <link href="/2023/05/04/first-page/"/>
      <url>/2023/05/04/first-page/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题测试"><a href="#一级标题测试" class="headerlink" title="一级标题测试"></a>一级标题测试</h1><h2 id="二级标题测试"><a href="#二级标题测试" class="headerlink" title="二级标题测试"></a>二级标题测试</h2><h6 id="六级测试"><a href="#六级测试" class="headerlink" title="六级测试"></a>六级测试</h6><p><em>加粗测试</em></p><table><thead><tr><th>table</th><th>测试</th></tr></thead><tbody><tr><td>分割</td><td>1</td></tr></tbody></table><p>换行测试</p><pre class="line-numbers language-none"><code class="language-none">code test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> tf </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/28/hello-world/"/>
      <url>/2023/04/28/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
